buildscript {
    repositories {
		jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE")
        classpath('com.bmuschko:gradle-docker-plugin:3.4.3')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'

// Spring variables
def jarName = 'gs-spring-boot'

// Docker variables
def docker_path      = "build/docker/web/"
def docker_user_name = 'bryanbcruz', image_name = 'teste2', image_tag = 'latest' 
def image_full_name  = docker_user_name + '/' + image_name + ':' + image_tag 

bootJar {
    baseName = jarName
    version  =  '0.1.0'
}

repositories {
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
}

task copyJarFile(type: Copy, group: "Docker", description: "Copy jar file to the Dockerfile directory") {
    dependsOn bootJar
    
    from bootJar.archivePath
    into docker_path
}

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

task createWebDockerfile(type: Dockerfile, group: "Docker", description: "Creates Dockerfile") {
    destFile = project.file(docker_path + 'Dockerfile')
    from 'openjdk:8-jre-alpine'
    maintainer "Bryan Cruz <bryan.cruz@rivendel.com.br>"
    def destJarPath = '/app/' + jarName + '.jar'
    copyFile bootJar.archiveName, destJarPath
    entryPoint 'java'
    workingDir '/app'
    defaultCommand '-jar', destJarPath
    exposePort 8080
}

task createDockerImage(type: DockerBuildImage, group: "Docker", description: "Creates a Docker image from the Dockerfile generated in this build") {
    dependsOn createWebDockerfile, copyJarFile

    inputDir = createWebDockerfile.destFile.parentFile
    
    tag = image_full_name
}

task pushDockerImage(type: DockerPushImage, group: "Docker", description: "Pushes the Docker image to the registry configured in your system") {
    dependsOn createDockerImage

    imageName = image_full_name
} 

build.dependsOn createDockerImage, pushDockerImage